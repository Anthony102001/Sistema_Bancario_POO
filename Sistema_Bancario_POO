class Cliente:
    def __init__(self, cpf, nome, data_nascimento, endereco):
        self.cpf = cpf
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.endereco = endereco

class ContaBancaria:
    def __init__(self, agencia, numero_conta, cliente):
        self.agencia = agencia
        self.numero_conta = numero_conta
        self.cliente = cliente
        self.saldo = 0
        self.limite = 500
        self.extrato = ""
        self.numero_saques = 0

    def depositar(self, valor):
        if valor > 0:
            self.saldo += valor
            self.extrato += f"Depósito:\tR$ {valor:.2f}\n"
            print("\n=== Depósito realizado com sucesso! ===")
        else:
            print("\n! O valor informado é inválido.")

    def sacar(self, valor):
        excedeu_saldo = valor > self.saldo
        excedeu_limite = valor > self.limite
        excedeu_saques = self.numero_saques >= 3

        if excedeu_saldo:
            print("\n Você não tem saldo suficiente. ")

        elif excedeu_limite:
            print("\n O valor do saque excede o limite. ")

        elif excedeu_saques:
            print("\n Número máximo de saques excedido. ")

        elif valor > 0:
            self.saldo -= valor
            self.extrato += f"Saque:\t\tR$ {valor:.2f}\n"
            self.numero_saques += 1
            print("\n=== Saque realizado com sucesso! ===")

        else:
            print("\n O valor informado é inválido.")

    def exibir_extrato(self):
        print("\n================ EXTRATO ================")
        print("Não foram realizadas movimentações." if not self.extrato else self.extrato)
        print(f"\nSaldo:\t\tR$ {self.saldo:.2f}")
        print("==========================================")


class Banco:
    def __init__(self):
        self.AGENCIA = "0001"
        self.clientes = []
        self.contas = []

    def criar_cliente(self):
        cpf = input("Informe o CPF (somente número): ")
        for cliente in self.clientes:
            if cliente.cpf == cpf:
                print("\n Já existe usuário com esse CPF! ")
                return

        nome = input("Informe o nome completo: ")
        data_nascimento = input("Informe a data de nascimento (dd-mm-aaaa): ")
        endereco = input("Informe o endereço (logradouro, nro - bairro - cidade/sigla estado): ")

        self.clientes.append(Cliente(cpf, nome, data_nascimento, endereco))

        print("=== Usuário criado com sucesso! ===")

    def criar_conta(self):
        cpf = input("Informe o CPF do usuário: ")
        for cliente in self.clientes:
            if cliente.cpf == cpf:
                numero_conta = len(self.contas) + 1
                self.contas.append(ContaBancaria(self.AGENCIA, numero_conta, cliente))
                print("\n=== Conta criada com sucesso! ===")
                return

        print("\n Usuário não encontrado, fluxo de criação de conta encerrado! ")

    def listar_contas(self):
        for conta in self.contas:
            linha = f"""\
                Agência:\t{conta.agencia}
                C/C:\t\t{conta.numero_conta}
                Titular:\t{conta.cliente.nome}
            """
            print("=" * 100)
            print(linha)


def main():
    banco = Banco()

    while True:
        menu = """\n
        ================ MENU ================
        [1]\tDepositar
        [2]\tSacar
        [3]\tExtrato
        [4]\tNova conta
        [5]\tNovo usuário
        [6]\tSair
        => """
        opcao = input(menu)

        if opcao == "1":
            for conta in banco.contas:
                print(f"Agência: {conta.agencia}, C/C: {conta.numero_conta}, Titular: {conta.cliente.nome}")
            numero_conta = int(input("Informe o número da conta: "))
            for conta in banco.contas:
                if conta.numero_conta == numero_conta:
                    valor = float(input("Informe o valor do depósito: "))
                    conta.depositar(valor)
                    break
            else:
                print
